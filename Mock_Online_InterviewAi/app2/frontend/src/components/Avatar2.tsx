/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/67a0838ef4bfcf9477a515cb.glb -o src/components/Avatar.jsx -r public
*/

import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import React, { useEffect, useRef, useState } from "react";
import * as THREE from "three";

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

interface AvatarProps {
  playAudio: boolean;
  script: string;
}

export function Avatar(props: AvatarProps) {
  const { playAudio, script } = props; // Receive props from App.tsx

  const headFollow = true; // Keep as a constant
  const smoothMorphTarget = true; // Keep as a constant
  const morphTargetSmoothing = 0.5; // Keep as a constant

  interface MouthCue {
    start: number;
    end: number;
    value: string;
  }

  interface LipsyncData {
    mouthCues: MouthCue[];
  }

  const audioRef = useRef<HTMLAudioElement>(new Audio()); // Initialize with an empty Audio object
  const isPlayingRef = useRef<boolean>(false); // Track if audio is playing
  const [lipsync, setLipsync] = useState<LipsyncData | null>(null);
  const isAudioLoadedRef = useRef<boolean>(false);
  const scriptVersionRef = useRef<number>(0); // New ref to track script changes

  // ✅ Load the JSON file properly
  useEffect(() => {
    const loader = new THREE.FileLoader();
    loader.load(`/audios/${script}.json`, (data) => {
      try {
        const jsonData = JSON.parse(data);
        setLipsync(jsonData);
      } catch (error) {
        console.error("Failed to parse JSON:", error);
      }
    });
  }, [script]);

  // ✅ Load the model and Idle animation
  const { nodes, materials } = useGLTF("/models/67a0838ef4bfcf9477a515cb.glb");
  const { animations: idleAnimation } = useFBX("/animations/Idle.fbx"); 

  idleAnimation[0].name = "Idle";

  const group = useRef();
  const { actions } = useAnimations([idleAnimation[0]], group);

  // ✅ Track if Idle animation is already running
  const isIdlePlaying = useRef(false);

  // ✅ Start Idle animation immediately and keep it running
  useEffect(() => {
    if (actions["Idle"] && !isIdlePlaying.current) {
      actions["Idle"].reset().fadeIn(0.5).play();
      isIdlePlaying.current = true; // Prevent restarting Idle animation
    }
  }, [actions]);

  // Audio Playback Logic
  useEffect(() => {
    const audio = audioRef.current;
    isAudioLoadedRef.current = false; // Reset the flag when the script changes
    scriptVersionRef.current++; // Increment the version number
    const cacheBustingUrl = `/audios/${script}.wav?v=${scriptVersionRef.current}`; // Add version to URL
    audio.src = cacheBustingUrl; // Update the audio source
    audio.load(); // Load the new audio source
    
    const handleCanPlayThrough = () => {
      isAudioLoadedRef.current = true;
      if (playAudio && !isPlayingRef.current) {
        audio.play().then(() => {
          isPlayingRef.current = true;
        }).catch(error => {
          console.error("Error playing audio:", error);
        });
      }
    };

    const handleEnded = () => {
      isPlayingRef.current = false;
    };

    audio.addEventListener("canplaythrough", handleCanPlayThrough);
    audio.addEventListener("ended", handleEnded);

    if (!playAudio && isPlayingRef.current) {
      audio.pause();
      audio.currentTime = 0;
      isPlayingRef.current = false;
    }

    return () => {
      audio.removeEventListener("canplaythrough", handleCanPlayThrough);
      audio.removeEventListener("ended", handleEnded);
      audio.pause();
      audio.currentTime = 0;
      isPlayingRef.current = false;
      isAudioLoadedRef.current = false;
    };
  }, [playAudio, script]);

  // ✅ Lip Sync using morph targets only
  useFrame(() => {
    if (!lipsync || !audioRef.current || audioRef.current.paused || audioRef.current.ended) {
      return;
    }

    const currentAudioTime = audioRef.current.currentTime;

    // Reset all morph targets
    Object.values(corresponding).forEach((viseme) => {
      const headIndex = nodes.Wolf3D_Head.morphTargetDictionary[viseme];
      const teethIndex = nodes.Wolf3D_Teeth.morphTargetDictionary[viseme];

      if (headIndex !== undefined && teethIndex !== undefined) {
        nodes.Wolf3D_Head.morphTargetInfluences[headIndex] = 0;
        nodes.Wolf3D_Teeth.morphTargetInfluences[teethIndex] = 0;
      }
    });

    // Apply lip sync morph targets based on the current audio time
    for (let i = 0; i < lipsync.mouthCues.length; i++) {
      const { start, end, value } = lipsync.mouthCues[i];

      if (currentAudioTime >= start && currentAudioTime <= end) {
        const viseme = corresponding[value];

        const headIndex = nodes.Wolf3D_Head.morphTargetDictionary[viseme];
        const teethIndex = nodes.Wolf3D_Teeth.morphTargetDictionary[viseme];

        if (headIndex !== undefined && teethIndex !== undefined) {
          nodes.Wolf3D_Head.morphTargetInfluences[headIndex] = THREE.MathUtils.lerp(
            nodes.Wolf3D_Head.morphTargetInfluences[headIndex],
            1,
            morphTargetSmoothing
          );

          nodes.Wolf3D_Teeth.morphTargetInfluences[teethIndex] = THREE.MathUtils.lerp(
            nodes.Wolf3D_Teeth.morphTargetInfluences[teethIndex],
            1,
            morphTargetSmoothing
          );
        }
        break;
      }
    }
  });

  // ✅ Smooth head follow logic
  useFrame((state) => {
    if (headFollow) {
      const head = group.current.getObjectByName("Head");
      if (head) {
        head.lookAt(state.camera.position);
        head.rotation.y = THREE.MathUtils.lerp(head.rotation.y, state.camera.rotation.y, 0.05);
        head.rotation.x = THREE.MathUtils.lerp(head.rotation.x, state.camera.rotation.x, 0.05);
      }
    }
  });

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/models/67a0838ef4bfcf9477a515cb.glb");
